Dans cette architecture en microservices, nous avons réparti les entités en trois services principaux :

Users Service → Gère les utilisateurs et leur rôle (étudiants, enseignants, agents administratifs).
Courses Service → Gère les cours, matières, sessions, inscriptions et années académiques.
Program Service → Gère les programmes, types d’enseignement et secteurs.
Chaque microservice a sa propre base de données. Les relations inter-services sont représentées par des attributs @Transient qui stockent les identifiants des entités externes.

1. Users Service (Gestion des Utilisateurs)
1.1. User
Représente un utilisateur de la plateforme.
Contient un emailPro et un token (probablement pour l'authentification).
Relation : Aucune relation directe avec d’autres entités, mais il est lié aux Students, Teachers et AdministrativeAgents via leur emailPro.
1.2. Student
Représente un étudiant inscrit.
Contient des informations personnelles : firstName, lastName, emailPro, phoneNumber, etc.
Relations :
	Avec AcademicYear (Courses Service) → Un étudiant appartient à une année académique (academicYearId).
	Avec Sector (Program Service) → Un étudiant est inscrit dans un secteur (sectorId).
1.3. Teacher
Représente un enseignant.
Contient les informations de contact.
Relation :
	Avec Course (Courses Service) → Un enseignant enseigne un cours (courseId).
1.4. AdministrativeAgent
Représente un agent administratif.
Similaire à Student et Teacher, mais sans relation externe spécifique.
	2. Courses Service (Gestion des Cours et Inscriptions)
2.1. Course
Représente un cours avec un name et une description.
Relation :
	Avec Subject → Un cours contient plusieurs matières.
2.2. Subject
Représente une matière.
Relation :
	Avec Course → Une matière appartient à un cours (courseId).
2.3. Session
Représente une session d’un cours (période de formation).
Relation :
	Avec Course → Une session est liée à un cours (courseId).
2.4. Registration
Gère l’inscription des étudiants à une classe.
Relations :
	Avec Student (Users Service) → Un étudiant peut s’inscrire (studentId).
	Avec Class → Une inscription est liée à une classe (classId).
2.5. AcademicYear
Représente une année académique.
Relation :
	Avec Student (Users Service) → Un étudiant appartient à une année académique (academicYearId).
	3. Program Service (Gestion des Programmes et Secteurs)
3.1. Program
Définit un programme d’études.
3.2. Kind
Définit un type d’enseignement (ex : Licence, Master).
3.3. Sector
Représente un secteur académique.
Relation :
	Avec Student (Users Service) → Un étudiant appartient à un secteur (sectorId).